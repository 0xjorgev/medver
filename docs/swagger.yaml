swagger: '2.0'
info:
  title: Somosport Core API
  description: Basic description of services provided by Somosport Core. Online editor & validator available at  http://editor.swagger.io/
  version: "1.0"
# the domain of the service
# host: ss-core-dev.herokuapp.com
#host: localhost:3000
# array of all schemes that your API supports
schemes:
  - http
  - https
# will be prefixed to all paths
basePath: /api/v1.0
produces:
  - application/json

##################################################
#
#  _____                 _
# /  ___|               (_)
# \ `--.  ___ _ ____   ___  ___ ___  ___
#  `--. \/ _ \ '__\ \ / / |/ __/ _ \/ __|
# /\__/ /  __/ |   \ V /| | (_|  __/\__ \
# \____/ \___|_|    \_/ |_|\___\___||___/
#
#
###################################################

paths:
  /feed_item/{feed_item_id}/comment:
    get:
      summary: Returns the comments of the given feed item
      description: Returns the comments of the given feed item
      tags:
        - Comment
        - Feed
      parameters:
        - name: feed_item_id
          in: path
          description: Feed item ID
          required: true
          type: integer
          format: integer
    responses:
        200:
          description: A signed url for upload; a final URL to access the file
    post:
      summary: Creates a comment associated with the given feed item
      description: Creates a comment associated with the given feed item
      tags:
        - Feed
        - Comment
      parameters:
        - name: Authorization-Token
          in: header
          type: string
          required: true
        - name: feed_item_id
          in: path
          description: Feed item ID
          required: true
          type: integer
          format: integer
        - name: Body
          in: body
          required: true
          x-is-map: false
          schema:
            title: Comment creation
            type: object
            properties:
              message:
                type: string
            required:
            - message
      responses:
        200:
          description: OK Message
  /core/services/stats:
    get:
      summary: Reports usage of core services
      description: Reports usage of core services
      tags:
        - Core
      responses:
        200:
          description: List of services and call count
  /core/s3_signed_url:
    get:
      summary: Returns a signed URL to upload a file to SomoSport
      description: Returns a signed URL to upload a file to SomoSport
      tags:
        - Core
      parameters:
        - name: file_name
          description: The name under which the file will be saved
          in: query
          type: string
          required: true
        - name: file_type
          description: MIME type of the file
          in: query
          type: string
          required: true
      responses:
        200:
          description: A signed url for upload; a final URL to access the file
  /core/feed/rebuild:
    post:
      summary: Rebuilds feed items. Truncates feed item table.
      description: Truncates feed_items table, deletes all feed item relations, then rebuilds all feed items.
      tags:
        - Core
        - Feed
      parameters:
      - name: Authorization-Token
        in: header
        type: string
        required: true
      responses:
        200:
          description: OK message
  /core/entities/build:
    post:
      summary: Builds missing competition entities
      description: Builds missing competition entities
      tags:
        - Core
    #   parameters:
    #   - name: Authorization-Token
    #     in: header
    #     type: string
    #     required: true
      responses:
        200:
          description: OK message
  /user:
    get:
      summary: Returns the list of active users
      description: Returns the list of active users
      tags:
        - User
      parameters:
        - name: Authorization-Token
          in: header
          type: string
          required: true
      responses:
        200:
          description: Active user list
  /user/login:
    post:
      summary: Authenticates an user, given its username & password
      description: Authenticates an user, given its username & password
      tags:
        - User
      parameters:
        - name: Body
          in: body
          required: true
          x-is-map: false
          schema:
            $ref: '#/definitions/UserLogin'
      responses:
        200:
          description: Active user list
  /user/register:
    post:
      summary: Registers a user in Somosport DB
      description: Registers a user in Somosport DB
      tags:
        - User
      parameters:
        - name: Body
          in: body
          required: true
          x-is-map: false
          schema:
            title: User Creation Request
            type: object
            properties:
              username:
                type: string
              email:
                type: string
              password:
                type: string
            required:
            - player_id
      responses:
        200:
          description: Active user list
  /user/recover_password:
    post:
      summary: Recover password service
      description: If username/email is found, a new password is generated & sent to the registered email
      tags:
        - User
      parameters:
        - name: Body
          in: body
          required: true
          x-is-map: false
          schema:
            title: password recover request
            type: object
            properties:
              username:
                type: string
                description: Username or email
            required:
            - username
      responses:
        200:
          description: Successful password recovery
        404:
          description: No user was found with the given username/email
  /user/change_password:
    post:
      summary: Change password
      description: If username/email is found, then password is changed
      tags:
        - User
      parameters:
        - name: Body
          in: body
          required: true
          x-is-map: false
          schema:
            title: password change request
            type: object
            properties:
              username:
                type: string
                description: Username or email
              old_password:
                type: string
                description: Current password
              new_password:
                type: string
                description: New password
            required:
            - username
            - old_password
            - new_password
      responses:
        200:
          description: Active user list
  /user/team:
    get:
      summary: Returns a list of teams on which this user is an owner
      description: Returns a list of teams on which this user is an owner
      tags:
        - User
      parameters:
        - name: Authorization-Token
          in: header
          type: string
          required: true
      responses:
        200:
          description: User team list
        403:
          description: Invalid Authorization-Token or no Authorization-Token received
        404:
          description: No teams found
  /user/{user_id}/feed:
    get:
      summary: Returns the news feed of an user
      description: Returns the news feed of an user
      tags:
        - User
        - Feed
      parameters:
      - name: Authorization-Token
        in: header
        type: string
        required: true
      - name: user_id
        in: path
        description: User ID
        required: true
        type: integer
        format: integer
      responses:
        200:
          description: User news feed
        403:
          description: Invalid Authorization-Token or no Authorization-Token received
        404:
          description: No news found
  /user/{user_id}:
    get:
      summary: Return info of a user
      description: Return info of a user
      tags:
        - User
      parameters:
    #   - name: Authorization-Token
    #     in: header
    #     type: string
    #     required: true
      - name: user_id
        in: path
        description: User ID
        required: true
        type: integer
        format: integer
      responses:
        200:
          description: User info
        403:
          description: Invalid Authorization-Token or no Authorization-Token received
        404:
          description: No user found
  /user/{user_id}/organization:
    get:
      summary: Returns the organizations of a user
      description: Returns the organizations of a user
      tags:
        - User
      parameters:
    #   - name: Authorization-Token
    #     in: header
    #     type: string
    #     required: true
      - name: user_id
        in: path
        description: User ID
        required: true
        type: integer
        format: integer
      responses:
        200:
          description: User info
        # 403:
        #   description: Invalid Authorization-Token or no Authorization-Token received
        204:
          description: No user found
  /user/language/:
    put:
      summary: Updates the user prefered language
      description: Updates the user prefered language
      tags:
        - User
      parameters:
      - name: lang
        in: body
        description: language
        required: true
        type: string
        format: string
      responses:
        200:
          description: User info
        403:
          description: Invalid Authorization-Token or no Authorization-Token received
        404:
          description: No user found
  /competition:
    get:
      summary: List of competitions managed by the user_id received in auth-token
      description: List of competitions managed by the user_id received in auth-token
      tags:
        - Competition
      produces:
      - application/json
      parameters:
        - name: Authorization-Token
          in: header
          type: string
          required: true
        - name: sort
          in: query
          type: string
          required: false
      responses:
        200:
          description: List of competition managed by token user
        404:
          description: User doesn't manage any competitions
      security: []
    post:
      summary: Creates a competition
      description: Competition Creation
      tags:
        - Competition
      produces:
      - application/json
      parameters:
      - name: Authorization-Token
        in: header
        type: string
        required: true
      - name: Body
        in: body
        required: true
        x-is-map: false
        schema:
          $ref: '#/definitions/CreateCompetitionRequest'
      responses:
        200:
          description: result
      security: []
  /competition/query/by_city:
    get:
      summary: List of competitions managed by the user_id received in auth-token & filtered by city
      description: List of competitions managed by the user_id received in auth-token & filtered by city
      tags:
        - Competition
      produces:
      - application/json
      parameters:
        - name: Authorization-Token
          in: header
          type: string
          required: true
      responses:
        200:
          description: List of competition managed by token user
        404:
          description: User doesn't manage any competitions
      security: []
  /competition/{competition_id}/season/{season_id}/category/{category_id}/publish:
    put:
      summary: Sets a category and a competition as published.
      description: Sets a category and a competition as published. Sends emails to all admins
      tags:
        - Competition
      produces:
      - application/json
      parameters:
      - name: competition_id
        in: path
        description: Competition ID
        required: true
        type: integer
        format: integer
      - name: season_id
        in: path
        description: season ID
        required: true
        type: integer
        format: integer
      - name: category_id
        in: path
        description: category ID
        required: true
        type: integer
        format: integer
      - name: Body
        in: body
        required: true
        x-is-map: false
        schema:
          title: Competition & category publish Request
          type: object
          properties:
            is_published:
              type: boolean
      responses:
        200:
          description: Competition update
      security: []
  /competition/{competition_id}:
    get:
      summary: Gets a competition given an id
      description: Full competition Object
      tags:
        - Competition
      produces:
      - application/json
      parameters:
      - name: competition_id
        in: path
        required: true
        type: integer
      responses:
        200:
          description: result
      security: []
    put:
      description: Competition Update
      produces:
      - application/json
      tags:
        - Competition
      parameters:
      - name: Authorization-Token
        in: header
        type: string
        required: true
      - name: competition_id
        in: path
        description: Competition ID
        required: true
        type: integer
        format: integer
      - name: Body
        in: body
        required: true
        x-is-map: false
        schema:
          $ref: '#/definitions/UpdateCompetitionRequest'
      responses:
        200:
          description: result
      security: []
  /competition/{competition_id}/season/:
    get:
      summary: List of seasons for each competition
      description: List of seasons for each competition
      tags:
        - Competition
        - Season
      produces:
      - application/json
      parameters:
        - name: competition_id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: results
      security: []
  /competition/competition_type:
    get:
      summary: Full List of competition types
      description: Full List of competition types
      operationId: Get_Competition_types
      tags:
        - Competition
        - Competition Type
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: results
      security: []
  /competition/rcompetition/{competition_id}:
    get:
      summary: Get Complete Competition
      description: Get All the competition tree
      tags:
        - Competition
      operationId: Get Complete Competition tree
      produces:
      - application/json
      parameters:
        - name: competition_id
          in: path
          description: Competition ID
          required: true
          type: integer
          format: integer
      responses:
        200:
          description: Competition object
      security: []
  /competition/query:
    get:
      summary: returns the list of participants in a competition
      description: returns the list of participants in a competition
      tags:
        - Competition
      produces:
      - application/json
      parameters:
      - name: page
        in: query
        type: integer
        description: Current page. Defaults to 1
      - name: page_size
        in: query
        type: integer
        description: Number of registers to return. Defaults to 10
      - name: sort
        in: query
        type: string
        description: Database name of the field to order by. Multiple fields allowed, separated by comma. Add a minus sign (-) to set order to desc. Defaults to 'asc'. Ex. 'created_at,-name'
      - name: competition_id
        in: query
        type: integer
        description: Filters competition by id
      - name: season_id
        in: query
        type: integer
        description: Filters competition's season by id. If found, returns only seasons with the given season_id
      - name: season_year
        in: query
        type: integer
        description: Filters seasons by init_at and end_at, from jan 1st <year> to dec 31th <year>
      - name: category_id
        in: query
        type: integer
        description: Filters seasons' categories by id. If found, returns only categories with the given category_id
      - name: team_status_id
        in: query
        type: integer
      responses:
        200:
          description: result
      security: []
  /competition/team:
    get:
      summary: returns the list of participants in a competition
      description: returns the list of participants in a competition
      tags:
        - Competition
      produces:
      - application/json
      parameters:
      - name: page
        in: query
        type: integer
        description: Current page. Defaults to 1
      - name: page_size
        in: query
        type: integer
        description: Number of registers to return. Defaults to 10
      - name: sort
        in: query
        type: string
        description: Database name of the field to order by. Multiple fields allowed, separated by comma. Add a minus sign (-) to set order to desc. Defaults to 'asc'. Ex. 'created_at,-name'
      - name: competition_id
        in: query
        type: integer
        description: Filters competition by id
      - name: season_id
        in: query
        type: integer
        description: Filters competition's season by id. If found, returns only seasons with the given season_id
      - name: season_year
        in: query
        type: integer
        description: Filters seasons by init_at and end_at, from jan 1st <year> to dec 31th <year>
      - name: category_id
        in: query
        type: integer
        description: Filters seasons' categories by id. If found, returns only categories with the given category_id
      - name: team_status_id
        in: query
        type: integer
      responses:
        200:
          description: result
      security: []
  /season:
    get:
      description: returns all seasons
      tags:
        - Season
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        x-is-map: false
        schema:
          $ref: '#/definitions/FullSeasonListRequest'
      responses:
        200:
          description: result
      security: []
  /season/{season_id}:
    get:
      description: get the detail of a season
      parameters:
        - name: season_id
          in: path
          required: true
          type: integer
      tags:
        - Season
      produces:
      - application/json
      responses:
        200:
          description: result
      security: []
    post:
      description: Creates a Season
      tags:
        - Season
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        x-is-map: false
        schema:
          $ref: '#/definitions/SeasonCreationRequest'
      responses:
        200:
          description: results
      security: []
    put:
      description: season update
      operationId: Update_Season Update_
      produces:
      - application/json
      tags:
        - Season
      parameters:
        - name: season_id
          in: path
          required: true
          type: integer
        - name: Body
          in: body
          required: true
          x-is-map: false
          schema:
            $ref: '#/definitions/SeasonUpdateRequest'
      responses:
        200:
          description: results
      security: []

  /season/{season_id}/standing_table:
    get:
      description: returns the standings of a given season
      parameters:
        - name: season_id
          in: path
          required: true
          type: integer
      tags:
        - Season
        - Standing table
      produces:
      - application/json
      responses:
        200:
          description: list of standing tables for this season
      security: []
  /category/{category_id}/match:
    get:
      summary: Returns the matches associated to to this category
      description: Returns the matches associated to to this category
      tags:
        - Category
        - Match
      responses:
        200:
          description: Something
      parameters:
        - name: category_id
          in: path
          description: Category ID
          required: true
          type: integer
          format: integer
    post:
      summary: Generates the matches for the given category id
      description: Generates the matches for the given category id
      tags:
        - Category
        - Match
      responses:
        200:
          description: Something
      parameters:
        - name: category_id
          in: path
          description: Category ID
          required: true
          type: integer
          format: integer
  /category/{category_id}/feed:
    get:
      summary: Returns the feed items associated to to this category
      description: Returns the feed items associated to to this category
      tags:
        - Category
        - Feed
      responses:
        200:
          description: Something
      parameters:
        - name: category_id
          in: path
          description: Category ID
          required: true
          type: integer
          format: integer
  /category/{category_id}/standing_table:
    get:
      summary: Gets the current standing table for a given category_id, separated by phases & groups
      description: Gets the current standing table for a given category_id, separated by phases & groups
      tags:
        - Standing table
      responses:
        200:
          description: the current standing_table of the category
      parameters:
        - name: category_id
          in: path
          description: Category ID
          required: true
          type: integer
          format: integer
  /category/{category_id}/summarized_standing_table:
    get:
      summary: Gets the current summarized standing table for a given category_id
      description: Gets the current summarized standing table for a given category_id
      tags:
        - Standing table
      responses:
        200:
          description: the current standing_table of the category
      parameters:
        - name: category_id
          in: path
          description: Category ID
          required: true
          type: integer
          format: integer
  /category:
    post:
      summary: Creates a category
      description: Creates a category
      produces:
      - application/json
      tags:
        - Category
      parameters:
      - name: Body
        in: body
        required: true
        x-is-map: false
        schema:
          $ref: '#/definitions/CategoryRequest'
      responses:
        200:
          description: result
      security: []
  /core/classification_type:
    get:
      summary: Gets the list of category types
      description: Gets the list of category types
      tags:
        - Classification Type
        - Core
      responses:
        200:
          description: A list of category types
  /category_type:
    get:
      summary: Gets the list of category types
      description: Gets the list of category types
      tags:
        - Core
        - Category Type
      responses:
        200:
          description: A list of category types
  /category/{category_id}:
    get:
      summary: Gets a category given an id
      description: Gets a category given an id
      tags:
        - Category
      responses:
        200:
          description: A category
      parameters:
        - name: category_id
          in: path
          description: Category ID
          required: true
          type: integer
          format: integer
    delete:
      summary: Deletes a category and all its related children
      description: Deletes a category and all its related children
      tags:
        - Category
      responses:
        200:
          description: the current standing_table of the category
      parameters:
        - name: category_id
          in: path
          description: Category ID
          required: true
          type: integer
          format: integer
    put:
      summary: Updates a category *BODY PARAMETER LIST NEEDS DOCUMENTATION*
      description: Updates a category
      produces:
      - application/json
      tags:
        - Category
      parameters:
      - name: category_id
        in: path
        description: Category ID
        required: true
        type: integer
        format: integer
      - name: Body
        in: body
        required: true
        x-is-map: false
        schema:
          $ref: '#/definitions/CategoryRequest'
      responses:
        200:
          description: result
      security: []
  /category/{category_id}/team/{team_id}/player:
    get:
      summary: Gets all the players that participate on a team in a category. Also known as summoned players
      description: Gets all the players that participate on a team in a category. Also knownas summoned players
      operationId: get_category_team_player_
      produces:
      - application/json
      parameters:
        - name: category_id
          in: path
          required: true
          type: integer
        - name: team_id
          in: path
          required: true
          type: integer
      tags:
        - Player
        - Category
        - Team
      responses:
        200:
          description: pending
  /category/{category_id}/team/{team_id}/player/{player_id}:
    get:
      summary: REVISAR Gets the players that participate on a team in a category
      description: duplicado? Get players by category_id and team_id
      operationId: get_category_team_player
      produces:
      - application/json
      parameters:
        - name: category_id
          in: path
          required: true
          type: integer
        - name: team_id
          in: path
          required: true
          type: integer
        - name: player_id
          in: path
          required: true
          type: integer
          format: integer
      tags:
        - Player
        - Category
        - Team
      responses:
        200:
          description: pending
    post:
      summary: Create info of the summoned player of one team on one category
      description: Create info of the summoned player of one team on one category
      operationId: post_category_team_player
      tags:
        - Player
        - Category
        - Team
      produces:
      - application/json
      parameters:
      - name: category_id
        in: path
        required: true
        type: integer
        format: integer
      - name: team_id
        in: path
        required: true
        type: integer
        format: integer
      - name: player_id
        in: path
        required: true
        type: integer
        format: integer
      - name: Body
        in: body
        required: false
        x-is-map: false
        schema:
          $ref: '#/definitions/CreateCategoryTeamPlayer'
      responses:
        200:
          description: Create info of the summoned player of one team on one category successful
      security: []
    put:
      summary: Update info of the summoned player of one team on one category
      description: Update info of the summoned player of one team on one category
      tags:
        - Player
        - Category
        - Team
      produces:
      - application/json
      parameters:
      - name: category_id
        in: path
        required: true
        type: integer
        format: integer
      - name: team_id
        in: path
        required: true
        type: integer
        format: integer
      - name: player_id
        in: path
        required: true
        type: integer
        format: integer
      - name: Body
        in: body
        required: true
        x-is-map: false
        schema:
          $ref: '#/definitions/UpdateCategyTeamPlayer'
      responses:
        200:
          description: Update info of the summoned player of one team on one category successful
      security: []
  /category/{category_id}/team:
    get:
      summary: Gets all teams invited to participate on a category
      description: Gets all teams invited to participate on a category
      tags:
        - Category
        - Team
      produces:
      - application/json
      parameters:
        - name: category_id
          in: path
          description: Category ID
          required: true
          type: integer
          format: integer
      responses:
        200:
          description: results
      security: []
  /category/{category_id}/se:
    post:
      summary: Category Create SE
      description: Create all phases groups, rounds and matches for a category for a competition of simple elimination
      tags:
        - Category
      operationId: Create_Category SE_
      produces:
        - application/json
      parameters:
        - name: category_id
          in: path
          description: Category ID
          required: true
          type: integer
          format: integer
        - name: Body
          in: body
          required: true
          x-is-map: false
          schema:
            $ref: '#/definitions/CategorySERequest'
      responses:
        200:
          description: OK response
      security: []
  /category/{category_id}/teams/{team_id}/matches:
    get:
      summary: Returns the matches of a given team, under a category
      tags:
        - Category
        - Team
      produces:
      - application/json
      parameters:
        - name: category_id
          in: path
          required: true
          type: integer
          format: integer
        - name: team_id
          in: path
          required: true
          type: integer
          format: integer
      responses:
        200:
          description: List of matches given a category and a team
  /category/{category_id}/team/{team_id}/invite:
    post:
      summary: Create Category Team Invite
      operationId: Create Category Team Invite
      tags:
        - Category
        - Team
      produces:
      - application/json
      parameters:
      - name: category_id
        in: path
        required: true
        type: integer
        format: integer
      - name: team_id
        in: path
        required: true
        type: integer
        format: integer
      responses:
        200:
          description: Created Category Team Invite
      security: []
  /category/{category_id}/participant/{participant_id}:
    put:
      description: updates a participant of a category
      summary: updates a participant of a category
      operationId: category_participant_update
      tags:
        - Category
      produces:
      - application/json
      parameters:
      - name: category_id
        in: path
        required: true
        type: integer
        format: integer
      - name: participant_id
        in: path
        required: true
        type: integer
        format: integer
      - name: Body
        in: body
        required: true
        x-is-map: false
        schema:
          $ref: '#/definitions/UpdateCategoryTeamInviteRequest'
      responses:
        200:
          description: Resource updated
      security: []
  /category/{category_id}/team/{team_id}/invite/{id}:
    put:
      summary: update Category Team Invite
      operationId: Update Category Team Invite
      tags:
        - Category
        - Team
      produces:
      - application/json
      parameters:
      - name: category_id
        in: path
        required: true
        type: integer
        format: integer
      - name: team_id
        in: path
        required: true
        type: integer
        format: integer
      - name: Body
        in: body
        required: true
        x-is-map: false
        schema:
          $ref: '#/definitions/UpdateCategoryTeamInviteRequest'
      responses:
        200:
          description: Resource updated
      security: []
    delete:
      summary: Delete logical Category Team Invite
      operationId: Delete logical Category Team Invite
      tags:
        - Category
        - Team
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        format: integer
      - name: category_id
        in: path
        required: true
        type: integer
        format: integer
      - name: team_id
        in: path
        required: true
        type: integer
        format: integer
      responses:
        200:
          description: Deleted logical category team invite
      security: []
  /category/{category_id}/team_placeholders:
    get:
      summary: Returns team placeholders for future matches
      description: Returns team placeholders for future matches.
      tags:
        - Category
      produces:
      - application/json
      parameters:
        - name: category_id
          in: path
          description: Phase ID
          required: true
          type: integer
          format: integer
      responses:
        200:
          description: List of placeholders
      security: []
  /category/{category_id}/team/{team_id}/request:
    post:
      summary: Creates a request for a team's participation in a category
      description: Creates a request for a team's participation in a category
      operationId: Category_request_Team
      tags:
        - Category
      produces:
      - application/json
      parameters:
      - name: team_id
        in: path
        required: true
        type: integer
        format: integer
      - name: category_id
        in: path
        required: true
        type: integer
        format: integer
      responses:
        200:
          description: OK
      security: []
      x-unitTests:
      - request:
          method: POST
          uri: /category/5/team/30/request
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: category_request_team
        x-testDescription:
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /category/{category_id}/register_tryouts:
    post:
      summary: Recive the information of one person and create a player that will participate in the category
      description: Recive the information of one person and create a player that will participate in the category
      parameters:
        - name: category_id
          in: path
          description: Category ID
          required: true
          type: integer
          format: integer
        - name: player data
          in: body
          required: true
          schema:
            $ref: '#/definitions/PlayerData'
      tags:
        - Category
        - Player
      responses:
        200:
          description: result
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /phase:
    get:
      summary: Complete list of phases
      description: Complete list of phases
      tags:
        - Phase
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: List of phases
      security: []
    post:
      summary: Creates a phase
      description: Creates a phase
      tags:
        - Phase
      produces:
      - application/json
      parameters:
        - name: Body
          in: body
          required: true
          x-is-map: false
          schema:
            title: Phase Creation Request
            type: object
            properties:
              name:
                type: string
              position:
                type: integer
              category_id:
                type: integer
              participant_team:
                type: integer
              classified_team:
                type: integer
            required:
            - category_id
            - name
      responses:
        200:
          description: Newly created phase
      security: []
  /phase/{phase_id}:
    get:
      summary: Gets a phase given its ID
      description: Gets a phase given its ID
      tags:
        - Phase
      produces:
      - application/json
      parameters:
        - name: phase_id
          in: path
          description: Phase ID
          required: true
          type: integer
          format: integer
      responses:
        200:
          description: Detail of a phase
      security: []
    put:
      summary: Updates a phase given its ID
      description: Updates a phase given its ID
      tags:
        - Phase
      produces:
      - application/json
      parameters:
        - name: phase_id
          in: path
          description: Phase ID
          required: true
          type: integer
          format: integer
        - name: Body
          in: body
          required: true
          x-is-map: false
          schema:
            title: Phase Creation Request
            type: object
            properties:
              name:
                type: string
              position:
                type: integer
              category_id:
                type: integer
              participant_team:
                type: integer
              classified_team:
                type: integer
              active:
                type: boolean
      responses:
        200:
          description: Resource updated
  /phase/{phase_id}/team:
    get:
      summary: Returns the teams participating in a phase
      description: Returns the teams participating in a phase
      tags:
        - Phase
      produces:
      - application/json
      parameters:
        - name: phase_id
          in: path
          description: Phase ID
          required: true
          type: integer
          format: integer
      responses:
        200:
          description: List of teams in a phase
      security: []
  /phase/{phase_id}/match:
    get:
      summary: Given a Phase ID, returns the groups & matches associated to that phase
      description: Given a Phase ID, returns the groups & matches associated to that phase
      tags:
        - Phase
        - Match
      responses:
        200:
          description: List of groups & matches for the given phase
      parameters:
        - name: phase_id
          in: path
          description: Phase ID
          required: true
          type: integer
          format: integer
  /phase/{phase_id}/group_team:
    get:
      summary: returns groups & teams associated to this phase
      description: returns groups & teams associated to this phase
      tags:
        - Phase
      produces:
      - application/json
      parameters:
        - name: phase_id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: result
      security: []
  /group/{group_id}/standing_table:
    get:
      summary: Gets the current standing table for a given group_id
      description: Gets the current standing table for a given group_id
      tags:
        - Standing table
        - Group
      responses:
        200:
          description: the current standing_table of the group
      parameters:
        - name: group_id
          in: path
          description: group ID
          required: true
          type: integer
          format: integer
    post:
      summary: calculates & then gets the current standing table for a given group_id
      description: calculates & then gets the current standing table for a given group_id
      tags:
        - Standing table
        - Group
      responses:
        200:
          description: the current standing_table of the group
      parameters:
        - name: group_id
          in: path
          description: group ID
          required: true
          type: integer
          format: integer
  /group/:
    get:
      description: lists all groups
      operationId: get_group
      tags:
        - Group
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: list of groups
      security: []
    post:
      description: Creates a group
      tags:
        - Group
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        x-is-map: false
        schema:
          $ref: '#/definitions/CreateGroupRequest'
      responses:
        200:
          description: list of all matches
  /group/{group_id}/team:
    get:
      description: get teams invited to play on this group
      tags:
        - Group
        - Team
      produces:
      - application/json
      parameters:
        - name: group_id
          in: path
          description: Group ID
          required: true
          type: integer
          format: integer
      responses:
        200:
          description: list of teams currently on this group
      security: []
  /group/{group_id}/match:
    get:
      description: Get matches of this group
      tags:
        - Group
        - Match
      produces:
      - application/json
      parameters:
        - name: group_id
          in: path
          description: Group ID
          required: true
          type: integer
          format: integer
      responses:
        200:
          description: list of matches currently on this group
      security: []
  /match:
    get:
      summary: Gets all matches
      description: Gets all matches
      tags:
        - Match
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: list of all matches
      security: []
    post:
      summary: Creates a match
      description: Creates a match
      tags:
        - Match
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        x-is-map: false
        schema:
          $ref: '#/definitions/CreateMatchRequest'
      responses:
        200:
          description: match creation OK
      security: []
  /match/{match_id}:
    get:
      summary: Gets one match
      description: Gets one match
      tags:
        - Match
      produces:
      - application/json
      parameters:
      - name: match_id
        in: path
        description: Match ID
        required: true
        type: integer
        format: integer
      responses:
        200:
          description: list of all matches
      security: []
    put:
      summary: Updates a match
      description: Updates a match
      tags:
        - Match
      produces:
      - application/json
      parameters:
      - name: match_id
        in: path
        description: Match ID
        required: true
        type: integer
        format: integer
      - name: Body
        in: body
        required: true
        x-is-map: false
        schema:
          $ref: '#/definitions/CreateMatchRequest'
      responses:
        200:
          description: match creation OK
      security: []
  /match/{match_id}/feed:
    get:
      summary: Gets the feed of one match
      description: Gets the feed of one match
      tags:
        - Match
      produces:
      - application/json
      parameters:
      - name: match_id
        in: path
        description: Match ID
        required: true
        type: integer
        format: integer
      responses:
        200:
          description: list of all feed items for this match
      security: []
  /match/{match_id}/player:
    get:
      summary: Returns the player list for this match, grouped by home_team & visitor_team
      description: Returns the player list for this match, grouped by home_team & visitor_team
      tags:
        - Match
        - Player
      produces:
      - application/json
      parameters:
      - name: match_id
        in: path
        description: Match ID
        required: true
        type: integer
        format: integer
      responses:
        200:
          description: list of players available for this match
  /match/{match_id}/team/{team_id}/player:
    get:
      summary: Gets the player list for this team & match
      description: Gets the player list for this team & match
      tags:
        - Match
        - Player
      produces:
      - application/json
      parameters:
      - name: match_id
        in: path
        description: Match ID
        required: true
        type: integer
        format: integer
      - name: team_id
        in: path
        description: Team ID
        required: true
        type: integer
        format: integer
      responses:
        200:
          description: List of players assigned to this match & team
    put:
      summary: Toggles the participation of the given player in this match
      description: Toggles the participation of the given player in this match; necessary for updating the summoned player list for each match
      tags:
        - Match
        - Player
      produces:
      - application/json
      parameters:
      - name: match_id
        in: path
        description: Match ID
        required: true
        type: integer
        format: integer
      - name: team_id
        in: path
        description: Team ID
        required: true
        type: integer
        format: integer
      - name: player_data
        in: body
        required: true
        x-is-map: false
        schema:
          $ref: '#/definitions/MatchPlayerTeamRequest'
      responses:
        200:
          description: Correct update of match player list
  /match/{match_id}/team:
    get:
      summary: Gets all the info associated with the teams with the match. Summoned players included
      description: Gets all the info associated with the teams with the match. Summoned players included
      tags:
        - Match
        - Team
      produces:
      - application/json
      parameters:
      - name: match_id
        in: path
        description: Match ID
        required: true
        type: integer
        format: integer
      responses:
        200:
          description: (documentation pending)
  /match/{match_id}/event:
    get:
      summary: Gets the events associated to a specific match
      description: Gets the events associated to a specific match
      tags:
        - Match
      produces:
      - application/json
      parameters:
      - name: match_id
        in: path
        description: Match ID
        required: true
        type: integer
        format: integer
      responses:
        200:
          description: List of events that happened during a match
    post:
      summary: registers the events that happened during a match
      description: registers the events that happened during a match
      tags:
        - Match
      produces:
      - application/json
      parameters:
      - name: match_id
        in: path
        description: Match ID
        required: true
        type: integer
        format: integer
      - name: events
        in: body
        required: true
        schema:
          $ref: '#/definitions/MatchEvents'
      responses:
        200:
          description: (documentation pending)
  /match/:match_id/team/:team_id/player:
    post:
      summary: registers the starter eleven players for a match for each team
      description: registers the starter eleven players for a match for each team
      tags:
        - Match
      produces:
      - application/json
      parameters:
      - name: match_id
        in: path
        description: Match ID
        required: true
        type: integer
        format: integer
      - name: team_id
        in: path
        description: Team ID
        required: true
        type: integer
        format: integer
      - name: events
        in: body
        required: true
        schema:
          $ref: '#/definitions/initialPlayers'
      responses:
        200:
          description: (documentation pending)
  /round:
    get:
      summary: List all rounds
      description: List all rounds
      operationId: get round
      produces:
      - application/json
      tags:
        - Season
      parameters: []
      responses:
        200:
          description: list of rounds
      security: []
  /event/{match_id}:
    get:
      summary: Gets the events of a match, given its category_id
      description: Gets the events of a match, given its category_id
      tags:
        - Event
      responses:
        200:
          description: Match event stream
      parameters:
        - name: match_id
          in: path
          description: Match ID
          required: true
          type: integer
          format: integer
  /team:
    get:
      summary: Gets the info of all teams
      description: Gets the info of all teams
      tags:
        - Team
      parameters:
        - name: category_type_id
          in: query
          description: Category Type ID
          required: false
          type: integer
          format: integer
        - name: gender_id
          in: query
          description: Gender ID
          required: false
          type: integer
          format: integer
        - name: subdiscipline_id
          in: query
          description: Subdiscipline ID
          required: false
          type: integer
          format: integer
      responses:
        200:
          description: List of teams
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Creates a team
      description: Creates a team
      tags:
        - Team
      produces:
      - application/json
      parameters:
      - name: Authorization-Token
        in: header
        type: string
        required: true
      - name: Body
        in: body
        required: true
        x-is-map: false
        schema:
          $ref: '#/definitions/CreateTeamRequest'
      responses:
        200:
          description: team creation OK
      security: []
  /team/{team_id}:
    get:
      summary: Returns the detail of one team
      description: Returns the detail of one team
      parameters:
        - name: team_id
          in: path
          description: Team ID
          required: true
          type: integer
          format: integer
      tags:
        - Team
      responses:
        200:
          description: An array of teams
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Updates a team
      description: Updates a team
      parameters:
        - name: Authorization-Token
          in: header
          type: string
          required: true
        - name: team_id
          in: path
          description: Team ID
          required: true
          type: integer
          format: integer
        - name: team data
          in: body
          required: true
          x-is-map: false
          schema:
            $ref: '#/definitions/CreateTeamRequest'
      tags:
        - Team
      responses:
        200:
          description: Resource updated
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Logical delete of a team given the id
      description: Logical delete of a team given the id
      tags:
        - Team
      responses:
        200:
          description: object deleted
      parameters:
        - name: team_id
          in: path
          description: Team ID
          required: true
          type: integer
          format: integer
  /team/{team_id}/competition:
    get:
      summary: Returns the competitions where the given team is registered
      description: Returns the competitions where the given team is registered
      parameters:
        - name: team_id
          in: path
          description: Team ID
          required: true
          type: integer
          format: integer
      tags:
        - Team
        - Competition
      responses:
        200:
          description: An array of competitions
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /team/{team_id}/player:
    get:
      summary: Gets the team's roster of players
      description: Gets the team's roster of players.
      parameters:
        - name: team_id
          in: path
          description: Team ID
          required: true
          type: integer
          format: integer
      tags:
        - Team
        - Player
      responses:
        200:
          description: An array of players
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Creates a player and inserts it in the team roster
      description: Receives an object or an array of objects, as described in the model example
      parameters:
        - name: team_id
          in: path
          description: Team ID
          required: true
          type: integer
          format: integer
        - name: player & team data
          in: body
          required: true
          schema:
            $ref: '#/definitions/PlayerTeamData'
      tags:
        - Team
        - Player
      responses:
        200:
          description: result
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  # /team/{team_id}/player/{player_id}:
  #   get:
  #     summary: Get the team's player
  #     description: Get the team's player
  #     parameters:
  #       - name: team_id
  #         in: path
  #         description: Team ID
  #         required: true
  #         type: integer
  #         format: integer
  #       - name: player_id
  #         in: path
  #         description: PLAYER ID
  #         required: true
  #         type: integer
  #         format: integer
  #     tags:
  #       - Team
  #       - Player
  #     responses:
  #       200:
  #         description: An team players
  #       default:
  #         description: Unexpected error
  #         schema:
  #           $ref: '#/definitions/Error'
  #   put:
  #     summary: Updates a player and inserts it in the team roster
  #     description: Updates a player and inserts it in the team roster
  #     parameters:
  #       - name: team_id
  #         in: path
  #         description: Team ID
  #         required: true
  #         type: integer
  #         format: integer
  #       - name: player and team data
  #         in: body
  #         required: true
  #         x-is-map: false
  #         schema:
  #           $ref: '#/definitions/PlayerTeamRequest'
  #     tags:
  #       - Team
  #       - Player
  #     responses:
  #       200:
  #         description: result
  #       default:
  #         description: Unexpected error
  #         schema:
  #           $ref: '#/definitions/Error'
  #   delete:
  #     summary: Sets a player of the roster as inactive. It does *not* deactivates the player
  #     description: Sets a player of the roster as inactive. It does *not* deactivates the player
  #     parameters:
  #       - name: team_id
  #         in: path
  #         description: Team ID
  #         required: true
  #         type: integer
  #         format: integer
  #       - name: player_id
  #         in: path
  #         required: true
  #         type: integer
  #     tags:
  #       - Team
  #       - Player
  #     responses:
  #       200:
  #         description: result
  #       default:
  #         description: Unexpected error
  #         schema:
  #           $ref: '#/definitions/Error'
  /team/{team_id}/category/{category_id}/request:
    post:
      summary: Create one request for participated in the category from the team to participated
      description: Create one request for participated in the category from the team to participated
      operationId: Team_request_Category
      tags:
        - Team
      produces:
      - application/json
      parameters:
      - name: team_id
        in: path
        required: true
        type: integer
        format: integer
      - name: category_id
        in: path
        required: true
        type: integer
        format: integer
      responses:
        200:
          description:
      security: []
      x-unitTests:
      - request:
          method: POST
          uri: /team/30/category/5/request
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Team_request_Category
        x-testDescription:
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /team/query/by_user:
    get:
      summary: Returns a list of teams on which this user is an owner
      description: Returns a list of teams on which this user is an owner
      tags:
        - Team
      parameters:
        - name: Authorization-Token
          in: header
          type: string
          required: true
      responses:
        200:
          description: List of teams on which this user is an owner
        403:
          description: Invalid Authorization-Token or no Authorization-Token received
        404:
          description: No teams found
  /team/{team_id}/match:
    get:
      summary: Returns all the matches for the team
      description: Returns all the matches for the team
      parameters:
        - name: team_id
          in: path
          description: Team ID
          required: true
          type: integer
          format: integer
      tags:
        - Team
      responses:
        200:
          description: An array of past, future matches and the next match for the team
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /team/{team_id}/event_calendar:
    get:
      summary: Returns the calendar events of one team
      description: Returns the calendar events of one team
      parameters:
        - name: team_id
          in: path
          description: Team ID
          required: true
          type: integer
          format: integer
      tags:
        - Team
      responses:
        200:
          description: the team information with an array of calendar events
        403:
          description: Invalid Authorization-Token or no Authorization-Token received
        404:
          description: No calendar events found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /player/{player_id}:
    get:
      summary: Gets player's info
      description: Gets player's info
      parameters:
        - name: player_id
          in: path
          required: true
          type: integer
      tags:
        - Player
      responses:
        200:
          description: Information about a single player
  /player:
    get:
      summary: Get all players
      description: Get all players
      parameters: []
      tags:
        - Player
      responses:
        200:
          description: List of all players
  /player/{player_id}/category/{category_id}/events:
    get:
      summary: Gets all player's events in a specific category
      description: Gets all player's events in a specific category
      parameters:
        - name: category_id
          in: path
          required: true
          type: integer
        - name: player_id
          in: path
          required: true
          type: integer
      tags:
        - Player
      responses:
        200:
          description: List of events
  /gender:
    get:
      description: get gender list
      operationId: get_gender_list
      produces:
      - application/json
      tags:
      - Gender
      responses:
        200:
          description: gender list
      security: []
  /gender/{gender_id}:
    get:
      description: Return info of a given gender
      operationId: get_gender_list_by_id
      produces:
      - application/json
      parameters:
        - name: gender_id
          in: path
          required: true
          type: integer
      tags:
        - Gender
      responses:
        200:
          description: results
      security: []
  /discipline/:
    get:
      summary: Lists all disciplines
      description: Lists all disciplines & associated subdisciplines
      tags:
        - Discipline
      operationId: Get All Disciplines
      produces:
      - application/json
      responses:
        200:
          description: list of all disciplines
  /discipline/{discipline_id}:
    get:
      summary: Gets info from a discipline given its ID
      description: Gets info from a discipline given its ID
      operationId: get_discipline_by_id
      produces:
      - application/json
      tags:
        - Discipline
      parameters:
        - name: discipline_id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: info from a discipline
      security: []
  /discipline/{discipline_id}/subdiscipline:
    get:
      summary: Gets the subdisciplines of a discipline given its id
      description: Gets the subdisciplines of a discipline given its id
      produces:
      - application/json
      tags:
        - Discipline
      parameters:
        - name: discipline_id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: Returns a list of subdisciplines given a discipline id
      security: []
  /discipline/subdiscipline/{subdiscipline_id}/event:
    get:
      summary: '?'
      description: '?'
      produces:
      - application/json
      tags:
        - Discipline
      parameters:
        - name: subdiscipline_id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: '?'
      security: []
  /subdiscipline:
    get:
      summary: Returns the list of subdisciplines
      description: Returns the list of subdisciplines
      tags:
        - Subdiscipline
      responses:
        200:
          description: List of active subdisciplines
  /subdiscipline/{subdiscipline_id}/event:
    get:
      summary: Returns the list of subdiscipline Available Events
      description: Returns the list of subdiscipline Available Events
      tags:
        - Subdiscipline
      parameters:
        - name: subdiscipline_id
          in: path
          required: true
          type: integer
          format: integer
      responses:
        200:
          description: Active subdiscipline Available Events
  /status_type:
    get:
      summary: Returns the list of Status Types active
      description: Returns the list of Status Types active
      operationId: Status_Type
      tags:
        - Status_Type
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description:
      security: []
      x-unitTests:
      - request:
          method: GET
          uri: /status_type
          headers:
            Content-Type: application/json
          body: >-
            {
              "category_id":5,
              "team_id":27,
              "phase_id":6,
              "active":true
            }
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Status_Type
        x-testDescription:
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /status_type/{id}:
    get:
      summary: Return the detail of one Status Types
      description: Return the detail of one Status Types
      operationId: Get Status Type
      tags:
        - Status_Type
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        format: integer
      responses:
        200:
          description:
      security: []
      x-unitTests:
      - request:
          method: GET
          uri: /status_type/2
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Get Status Type
        x-testDescription:
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /status_type/type/{type}:
    get:
      summary: Return the list of Status Types by Type
      description: Return the list of Status Types by Type
      operationId: Get Status Type by type
      tags:
        - Status_Type
      produces:
      - application/json
      parameters:
      - name: type
        in: path
        required: true
        type: string
      responses:
        200:
          description:
      security: []
      x-unitTests:
      - request:
          method: GET
          uri: /status_type/2
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Get Status Type
        x-testDescription:
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /request/{id}/type/{type}:
    get:
      summary: Return the list of request for the id of the type
      description: Return the list of request for the id of the type
      operationId: Get_Request_To
      tags:
        - Request
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        format: integer
      - name: type
        in: path
        required: true
        type: string
      responses:
        200:
          description:
      security: []
      x-unitTests:
      - request:
          method: GET
          uri: /request/28/type/teams
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: http://localhost:3000/api/v1.0/request/28/type/teams
        x-testDescription:
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: falsee
  /club:
    get:
      summary: Gets the info of all clubs
      description: Gets the info of all clubs
      tags:
        - Club
      responses:
        200:
          description: List of clubs
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Creates a club
      description: Creates a club
      tags:
        - Club
      produces:
      - application/json
      parameters:
      - name: Authorization-Token
        in: header
        type: string
        required: true
      - name: Body
        in: body
        required: true
        x-is-map: false
        schema:
          $ref: '#/definitions/CreateClubRequest'
      responses:
        200:
          description: club creation OK
      security: []
  /club/{club_id}:
    get:
      summary: Returns the detail of one club
      description: Returns the detail of one club
      parameters:
        - name: club_id
          in: path
          description: Club ID
          required: true
          type: integer
          format: integer
      tags:
        - Club
      responses:
        200:
          description: An array of clubs
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Updates a club
      description: Updates a club
      parameters:
        - name: Authorization-Token
          in: header
          type: string
          required: true
        - name: club_id
          in: path
          description: Club ID
          required: true
          type: integer
          format: integer
        - name: club data
          in: body
          required: true
          x-is-map: false
          schema:
            $ref: '#/definitions/CreateClubRequest'
      tags:
        - Club
      responses:
        200:
          description: Resource updated
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Logical delete of a club given the id
      description: Logical delete of a club given the id
      tags:
        - Club
      responses:
        200:
          description: object deleted
      parameters:
        - name: Authorization-Token
          in: header
          type: string
          required: true
        - name: club_id
          in: path
          description: Club ID
          required: true
          type: integer
          format: integer
  /club/query/by_user:
    get:
      summary: Returns a list of clubs on which this user is an owner
      description: Returns a list of clubs on which this user is an owner
      tags:
        - Club
      parameters:
        - name: Authorization-Token
          in: header
          type: string
          required: true
      responses:
        200:
          description: List of clubs on which this user is an owner
        403:
          description: Invalid Authorization-Token or no Authorization-Token received
        404:
          description: No clubs found
  /club/{club_id}/team:
    get:
      summary: Returns the teams members of the club
      description: Returns the teams members of the club
      parameters:
        - name: club_id
          in: path
          description: Club ID
          required: true
          type: integer
          format: integer
      tags:
        - Club
      responses:
        200:
          description: An array of teams
        403:
          description: Invalid Authorization-Token or no Authorization-Token received
        404:
          description: No teams found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /club/{club_id}/event_calendar:
    get:
      summary: Returns the calendar events of one club
      description: Returns the calendar events of one club
      parameters:
        - name: club_id
          in: path
          description: Club ID
          required: true
          type: integer
          format: integer
      tags:
        - Club
      responses:
        200:
          description: the club information with an array of calendar events
        403:
          description: Invalid Authorization-Token or no Authorization-Token received
        404:
          description: No calendar events found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /event_calendar:
    get:
      summary: Gets the info of all event calendars
      description: Gets the info of all event calendars
      tags:
        - Event Calendar
      responses:
        200:
          description: List of event_calendars
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Creates a event calendar
      description: Creates a event calendar
      tags:
        - Event Calendar
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        x-is-map: false
        schema:
          $ref: '#/definitions/EventCalendarRequest'
      responses:
        200:
          description: event_calendar creation OK
      security: []
  /event_calendar/{event_calendar_id}:
    get:
      summary: Returns the detail of one event calendar
      description: Returns the detail of one event calendar
      parameters:
        - name: event_calendar_id
          in: path
          description: Event Calendar ID
          required: true
          type: integer
          format: integer
      tags:
        - Event Calendar
      responses:
        200:
          description: An array of event_calendars
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Updates a event calendar
      description: Updates a event calendar
      parameters:
        - name: event_calendar_id
          in: path
          description: Event Calendar ID
          required: true
          type: integer
          format: integer
        - name: event_calendar data
          in: body
          required: true
          x-is-map: false
          schema:
            $ref: '#/definitions/EventCalendarRequest'
      tags:
        - Event Calendar
      responses:
        200:
          description: Resource updated
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: fisical delete of a event_calendar given the id
      description: fisical delete of a event_calendar given the id
      tags:
        - Event Calendar
      responses:
        200:
          description: object deleted
      parameters:
        - name: event_calendar_id
          in: path
          description: Event Calendar ID
          required: true
          type: integer
          format: integer
  /person:
    get:
      summary: Gets the info of all persons
      description: Gets the info of all persons
      tags:
        - Person
      responses:
        200:
          description: List of persons
    post:
      summary: Creates a person
      description: Creates a person
      tags:
        - Person
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        x-is-map: false
        schema:
          $ref: '#/definitions/PersonRequest'
      responses:
        200:
          description: person creation OK
      security: []
  /person/{person_id}:
    get:
      summary: Returns the detail of one person
      description: Returns the detail of one person
      parameters:
        - name: person_id
          in: path
          description: Person ID
          required: true
          type: integer
          format: integer
      tags:
        - Person
      responses:
        200:
          description: An array of persons
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Updates a person
      description: Updates a person
      parameters:
        - name: Authorization-Token
          in: header
          type: string
          required: true
        - name: person_id
          in: path
          description: Person ID
          required: true
          type: integer
          format: integer
        - name: person data
          in: body
          required: true
          x-is-map: false
          schema:
            $ref: '#/definitions/PersonRequest'
      tags:
        - Person
      responses:
        200:
          description: Resource updated
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


#######################################################################
#      _       __ _       _ _   _
#     | |     / _(_)     (_) | (_)
#   __| | ___| |_ _ _ __  _| |_ _  ___  _ __  ___
#  / _` |/ _ \  _| | '_ \| | __| |/ _ \| '_ \/ __|
# | (_| |  __/ | | | | | | | |_| | (_) | | | \__ \
#  \__,_|\___|_| |_|_| |_|_|\__|_|\___/|_| |_|___/
#
#######################################################################

definitions:
  UpdateCompetitionRequest:
    title: Update CompetitionRequest
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      discipline_id:
        type: integer
        format: int32
      subdiscipline_id:
        type: integer
        format: int32
      competition_type_id:
        type: integer
        format: int32
    required:
    - name
    - description
    - discipline_id
    - subdiscipline_id
    - competition_type_id
  FullSeasonListRequest:
    title: Full Season ListRequest
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      discipline_id:
        type: integer
        format: int32
      subdiscipline_id:
        type: integer
        format: int32
      competition_type_id:
        type: integer
        format: int32
    required:
    - name
    - description
    - discipline_id
    - subdiscipline_id
    - competition_type_id
  GenderListRequest:
    title: Gender ListRequest
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      discipline_id:
        type: integer
        format: int32
      subdiscipline_id:
        type: integer
        format: int32
      competition_type_id:
        type: integer
        format: int32
    required:
    - name
    - description
    - discipline_id
    - subdiscipline_id
    - competition_type_id
  SeasonbyIdRequest:
    title: Season by IdRequest
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      discipline_id:
        type: integer
        format: int32
      subdiscipline_id:
        type: integer
        format: int32
      competition_type_id:
        type: integer
        format: int32
    required:
    - name
    - description
    - discipline_id
    - subdiscipline_id
    - competition_type_id
  GenderByGenderIdRequest:
    title: Gender By Gender IdRequest
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      discipline_id:
        type: integer
        format: int32
      subdiscipline_id:
        type: integer
        format: int32
      competition_type_id:
        type: integer
        format: int32
    required:
    - name
    - description
    - discipline_id
    - subdiscipline_id
    - competition_type_id
  CreateCompetitionRequest:
    title: Create CompetitionRequest
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      discipline_id:
        type: integer
        format: int32
      subdiscipline_id:
        type: integer
        format: int32
      competition_type_id:
        type: integer
        format: int32
    required:
    - name
    - description
    - discipline_id
    - subdiscipline_id
    - competition_type_id
  SeasonUpdateRequest:
    title: Season UpdateRequest
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      game_title:
        type: string
      active:
        type: boolean
      init_at:
        type: string
      ends_at:
        type: string
    required:
    - name
    - description
    - game_title
    - active
    - init_at
    - ends_at
  SeasonCreationRequest:
    title: Season CreationRequest
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      game_title:
        type: string
      active:
        type: boolean
      init_at:
        type: string
      ends_at:
        type: string
    required:
    - name
    - description
    - game_title
    - active
    - init_at
    - ends_at
  GetAllDisciplinesRequest:
    title: Get All DisciplinesRequest
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      discipline_id:
        type: integer
        format: int32
      subdiscipline_id:
        type: integer
        format: int32
      competition_type_id:
        type: integer
        format: int32
    required:
    - name
    - description
    - discipline_id
    - subdiscipline_id
    - competition_type_id
  CategorySERequest:
    title: Category SERequest
    type: object
    properties:
      team_quantity:
        type: string
    required:
    - team_quantity
  CreateMatchRequest:
    title: Match Creation Request
    type: object
    properties:
      number:
        type: integer
      location:
        type: string
      home_team_id:
        type: integer
      visitor_team_id:
        type: integer
      home_team_score:
        type: integer
      visitor_team_score:
        type: integer
      date:
        type: string
      group_id:
        type: integer
      referee_id:
        type: integer
      placeholder_home_team_group:
          type: integer
          description: group_id for the home_team placeholder
      placeholder_home_team_position:
          type: integer
          description: position of the placeholder team according to the group's standing table
      placeholder_visitor_team_group:
          type: integer
          description: group_id for the visitor_team placeholder
      placeholder_visitor_team_position:
          type: integer
          description: position of the placeholder team according to the group's standing table
    required:
    - home_team_id
    - visitor_team_id
    - date
    - location
    - group_id
  CreateGroupRequest:
    title: Match Creation Request
    type: object
    properties:
      name:
        type: string
      phase_id:
        type: integer
      participant_team:
        type: integer
      classified_team:
        type: integer
    required:
    - name
    - phase_id
  MatchPlayerTeamRequest:
    title: Match Creation Request
    type: object
    properties:
      position:
        type: string
      number:
        type: integer
      player_id:
        type: integer
    required:
    - player_id
  CreateTeamRequest:
    title: Team Creation/Update Request
    type: object
    properties:
      name:
        type: string
      logo_url:
        type: string
      short_name:
        type: string
      description:
        type: string
      category_type_id:
        type: integer
        description: If not provided, a new 'club' organization will be created under the same name as the team
      gender_id:
        type: integer
        description: Gender associated to this team
      organization_id:
        type: integer
        description: If not provided, a new 'club' organization will be created under the same name as the team
      subdiscipline_id:
        type: integer
        description: Sport associated with this team
    required:
      - name
      - category_type_id
      - gender_id
      - subdiscipline_id
  UserLogin:
    title: User login info
    type: object
    properties:
      username:
        type: string
      password:
        type: string

  #TODO: cargar este ejemplo
  PlayerTeamRequest:
    title: PlayerTeam Request
    type: object
    properties:
      player:
        $ref: '#/definitions/CreateTeamRequest'
      team:
        $ref: '#/definitions/CreateGroupRequest'

  PlayerTeamData:
    type: array
    items:
      type: object
      properties:
        player:
          type: object
          description: player data
          required: true
          properties:
            first_name:
              type: string
              description: First name of the player
              required: true
            last_name:
              type: string
              description: Last name of the player
              required: true
            birthday:
              type: string
              description: Player's date of birth. ex. 2001-02-12T00:00:00-04:00
              required: true
            nickname:
              type: string
              description: Player's nickname or familiar name
              required: false
            email:
              type: string
              description: Player's email
              required: false
            document_number:
              type: string
              description: Identification number of the player, if available
              required: false
        team_player:
          type: object
          required: true
          properties:
            number:
              type: integer
              description: Player's number on team
              required: true
            position_id:
              type: integer
              description: Player's position on the team
              required: true
            team_id:
              type: integer
              description: Team identifier
              required: true

  UpdateCategoryTeamInviteRequest:
    title: Create Category Team InviteRequest
    type: object
    properties:
      category_id:
        type: integer
        format: int32
      team_id:
        type: integer
        format: int32
      phase_id:
        type: integer
        format: int32
      group_id:
        type: integer
        format: int32
      active:
        type: boolean
      status_id:
        type: integer
        format: int32
      payment:
        type: integer
        format: int32
      document:
        type: integer
        format: int32
      roster:
        type: integer
        format: int32

  UpdateCategyTeamPlayer:
    title: UpdateCategyTeamPlayer
    type: object
    properties:
      id:
        type: integer
        format: int32
      active:
        type: boolean
      number:
        type: integer
        format: int32
      position:
        type: string
    required:
    - id
  CreateCategoryTeamPlayer:
    title: CreateCategoryTeamPlayer
    type: object
    properties:
      category_id:
        type: string
      team_id:
        type: string
      player_id:
        type: string
      active:
        type: boolean
    required:
    - category_id
    - team_id
    - player_id
    - active
    - number
    - position
  CategoryRequest:
    title: CategoryRequest
    type: object
    properties:
      name:
        type: string
      is_published:
        type: boolean
      active:
        type: boolean
      number:
        type: integer
  MatchEvents:
    title: MatchEvents
    type: array
    items:
      type: object
      properties:
        event_id:
          type: integer
        player_in:
          type: integer
        player_out:
          type: integer
        instant:
          type: integer
        team_id:
          type: integer

  initialPlayers:
      title: initialPlayers
      type: array
      items:
        type: object
        properties:
          number:
            type: integer
          player_id:
            type: integer
          match_id:
            type: integer
          team_id:
            type: integer
  Error:
    title: error
    type: object
    properties:
      description:
        type: string
  CreateClubRequest:
    title: Club Creation/Update Request
    type: object
    properties:
      name:
        type: string
      logo_url:
        type: string
      short_name:
        type: string
      description:
        type: string
      organization_id:
        type: integer
        description: If not provided, a new 'club' organization will be created under the same name as the club
    required:
      - nam
  EventCalendarRequest:
    title: Event Calendar Creation/Update Request
    type: object
    properties:
      title:
        type: string
      startsAt:
        type: string
      endsAt:
        type: string
      place:
        type: string
      comment:
        type: string
      entity_parent_id:
        type: integer
        description: If not provided, a new 'event calendar' will not be associated with any entity
    required:
      - entity_parent_id

  PersonRequest:
    title: Person Creation/Update Request
    type: object
    properties:
      first_name:
        type: string
      last_name:
        type: string
      nickname:
        type: string
      email:
        type: string
      birthday:
        type: string
        description: Ex. 2001-02-12T00:00:00-04:00
      height:
        type: string
      weight:
        type: string
      img_url:
        type: string
      document_number:
        type: string
      document_img_url:
        type: string
      nationality:
        type: string
      claimed:
        type: string
      active:
        type: boolean
      gender_id:
        type: integer
      status_type_id:
        type: integer
      meta:
        type: string

  PlayerData:
    title: person
    type: object
    description: player data
    properties:
      first_name:
        type: string
        description: First name of the player
        required: true
      last_name:
        type: string
        description: Last name of the player
        required: true
      birthday:
        type: string
        description: Player's date of birth. ex. 2001-02-12T00:00:00-04:00
        required: true
      nickname:
        type: string
        description: Player's nickname or familiar name
        required: false
      email:
        type: string
        description: Player's email
        required: true
      gender_id:
        type: integer
        description: Player gender Id
        required: false
      document_number:
        type: string
        description: Identification number of the player, if available
        required: false
      img_url:
        type: string
        description: Player's photo
        required: false
      document_img_url:
        type: string
        description: Photo of the domcument number, if available
        required: false
      meta:
        type: string
        description: meta data of the player
        required: false
