swagger: '2.0'
info:
  title: Somosport Core API!
  description: Basic description of services provided by Somosport Core
  version: "1.0"
# the domain of the service
# host: somosportpocdev.herokuapp.com
host: localhost:3000
# array of all schemes that your API supports
schemes:
  - http
  - https
# will be prefixed to all paths
basePath: /api/v1.0
produces:
  - application/json

##################################################
#  _____                 _
# /  ___|               (_)
# \ `--.  ___ _ ____   ___  ___ ___  ___
#  `--. \/ _ \ '__\ \ / / |/ __/ _ \/ __|
# /\__/ /  __/ |   \ V /| | (_|  __/\__ \
# \____/ \___|_|    \_/ |_|\___\___||___/
#
# eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3NvbW9zcG9ydHBvY2Rldi5oZXJva3VhcHAuY29tLyIsInN1YiI6InVzZXJzLzEiLCJzY29wZSI6ImFkbWlucyIsImp0aSI6ImFkYzI5Y2FkLTdlMTItNGFhMS1iNGRhLWYzYzJjNTc0ZWI5NyIsImlhdCI6MTQ2OTcxNTMxOCwiZXhwIjoxNDY5NzE4OTE4fQ.h_Bo-R5NrlZG4oyFaTtkx7UDMrKzPM7cuTB4skbPt-I
# e10adc3949ba59abbe56e057f20f883e
###################################################

paths:
  /user:
    get:
      summary: Returns the list of active users
      description: Returns the list of active users
      tags:
        - User
      parameters:
        - name: token
          in: header
          type: string
          required: true
      responses:
        200:
          description: Active user list
  /user/login:
    post:
      summary: Returns the list of active users
      description: Returns the list of active users
      tags:
        - User
      parameters:
        - name: Body
          in: body
          required: true
          x-is-map: false
          schema:
            $ref: '#/definitions/UserLogin'
      responses:
        200:
          description: Active user list
  /phase/{phase_id}/group_round_match:
    get:
      summary: Given a Phase ID, returns the groups, rounds & matches associated to that phase
      description: Given a Phase ID, returns the groups, rounds & matches associated to that phase_
      tags:
        - Phase
      responses:
        200:
          description: Match event stream
      parameters:
        - name: phase_id
          in: path
          description: Phase ID
          required: true
          type: integer
          format: integer

  /event/{match_id}:
    get:
      summary: Gets the events of a match, given its category_id
      description: Gets the events of a match, given its category_id
      tags:
        - Event
      responses:
        200:
          description: Match event stream
      parameters:
        - name: match_id
          in: path
          description: Match ID
          required: true
          type: integer
          format: integer

  /category/{category_id}/standing_table:
    get:
      summary: Gets the current standing table for a given category_id
      description: Gets the current standing table for a given category_id
      tags:
        - Standing table
      responses:
        200:
          description: the current standing_table of the category
      parameters:
        - name: category_id
          in: path
          description: Category ID
          required: true
          type: integer
          format: integer
  /category/{category_id}:
    get:
      summary: Gets a category given an id
      description: Gets a category given an id
      tags:
        - Category
      responses:
        200:
          description: A category
      parameters:
        - name: category_id
          in: path
          description: Category ID
          required: true
          type: integer
          format: integer
    delete:
      summary: Deletes a category and all its related children
      description: Deletes a category and all its related children
      tags:
        - Category
      responses:
        200:
          description: the current standing_table of the category
      parameters:
        - name: category_id
          in: path
          description: Category ID
          required: true
          type: integer
          format: integer

  /group/{group_id}/standing_table:
    get:
      summary: Gets the current standing table for a given group_id
      description: Gets the current standing table for a given group_id
      tags:
        - Standing table
        - Group
      responses:
        200:
          description: the current standing_table of the group
      parameters:
        - name: group_id
          in: path
          description: group ID
          required: true
          type: integer
          format: integer
  /team:
    get:
      summary: Gets the info of all teams
      description: Gets the info of all teams
      tags:
        - Team
      responses:
        200:
          description: List of teams
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Creates a team
      description: Creates a team
      tags:
        - Team
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        x-is-map: false
        schema:
          $ref: '#/definitions/CreateTeamRequest'
      responses:
        200:
          description: team creation OK
      security: []
  /team/{team_id}:
    get:
      summary: Returns the detail of one team
      description: Returns the detail of one team
      parameters:
        - name: team_id
          in: path
          description: Team ID
          required: true
          type: integer
          format: integer
      tags:
        - Team
      responses:
        200:
          description: An array of products
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Updates a team
      description: Updates a team
      parameters:
        - name: team_id
          in: path
          description: Team ID
          required: true
          type: integer
          format: integer
        - name: team data
          in: body
          required: true
          x-is-map: false
          schema:
            $ref: '#/definitions/CreateTeamRequest'
      tags:
        - Team
      responses:
        200:
          description: An array of products
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /team/{team_id}/player:
    get:
      summary: Gets the team's roster of players
      description: Gets the team's roster of players
      parameters:
        - name: team_id
          in: path
          description: Team ID
          required: true
          type: integer
          format: integer
      tags:
        - Team
        - Player
      responses:
        200:
          description: An array of players
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Creates a player and inserts it in the team roster
      description: Creates a player and inserts it in the team roster
      parameters:
        - name: team_id
          in: path
          description: Team ID
          required: true
          type: integer
          format: integer
        - name: player and team data
          in: body
          required: true
          x-is-map: false
          schema:
            $ref: '#/definitions/PlayerTeamRequest'
      tags:
        - Team
        - Player
      responses:
        200:
          description:
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /team/{team_id}/player/{player_id}:
    put:
      summary: Updates a player and inserts it in the team roster
      description: Updates a player and inserts it in the team roster
      parameters:
        - name: team_id
          in: path
          description: Team ID
          required: true
          type: integer
          format: integer
        - name: player and team data
          in: body
          required: true
          x-is-map: false
          schema:
            $ref: '#/definitions/PlayerTeamRequest'
      tags:
        - Team
        - Player
      responses:
        200:
          description:
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Sets a player of the roster as inactive. It does *not* deactivates the player
      description: Sets a player of the roster as inactive. It does *not* deactivates the player
      parameters:
        - name: team_id
          in: path
          description: Team ID
          required: true
          type: integer
          format: integer
        - name: player_id
          in: path
          required: true
          type: integer
      tags:
        - Team
        - Player
      responses:
        200:
          description:
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /player/{player_id}:
    get:
      summary: Gets player's info
      description: Gets player's info
      parameters:
        - name: player_id
          in: path
          required: true
          type: integer
      tags:
        - Player
      responses:
        200:
          description: Information about a single player
  /player:
    get:
      summary: Get all players
      description: Get all players
      parameters: []
      tags:
        - Player
      responses:
        200:
          description: List of all players 
  /player/{player_id}/category/{category_id}/events:
    get:
      summary: Gets all player's events in a specific category
      description: Gets all player's events in a specific category
      parameters:
        - name: category_id
          in: path
          required: true
          type: integer
        - name: player_id
          in: path
          required: true
          type: integer
      tags:
        - Player
      responses:
        200:
          description: List of events
  /discipline/{discipline_id}/subdiscipline:
    get:
      description:
      produces:
      - application/json
      tags:
        - Discipline
      parameters:
        - name: discipline_id
          in: path
          required: true
          type: integer
      responses:
        200:
          description:
      security: []
  /match:
    get:
      description: Gets all matches
      tags:
        - Match
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: list of all matches
      security: []
    post:
      description: Creates a match
      tags:
        - Match
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        x-is-map: false
        schema:
          $ref: '#/definitions/CreateMatchRequest'
      responses:
        200:
          description: match creation OK
      security: []
  /match/{match_id}:
    get:
      description: Gets one match
      tags:
        - Match
      produces:
      - application/json
      parameters:
      - name: match_id
        in: path
        description: Match ID
        required: true
        type: integer
        format: integer
      responses:
        200:
          description: list of all matches
      security: []
    put:
      description: Updates a match
      tags:
        - Match
      produces:
      - application/json
      parameters:
      - name: match_id
        in: path
        description: Match ID
        required: true
        type: integer
        format: integer
      - name: Body
        in: body
        required: true
        x-is-map: false
        schema:
          $ref: '#/definitions/CreateMatchRequest'
      responses:
        200:
          description: match creation OK
      security: []

  /match/{match_id}/player:
    get:
      summary: Returns the player list for this match, grouped by home_team & visitor_team
      description: Returns the player list for this match, grouped by home_team & visitor_team
      tags:
        - Match
        - Player
      produces:
      - application/json
      parameters:
      - name: match_id
        in: path
        description: Match ID
        required: true
        type: integer
        format: integer
      responses:
        200:
          description: list of players available for this match

  /match/{match_id}/team/{team_id}/player:
    get:
      summary: Gets the player list for this team & match
      description: Gets the player list for this team & match
      tags:
        - Match
        - Player
      produces:
      - application/json
      parameters:
      - name: match_id
        in: path
        description: Match ID
        required: true
        type: integer
        format: integer
      - name: team_id
        in: path
        description: Team ID
        required: true
        type: integer
        format: integer
      responses:
        200:
          description: List of players assigned to this match & team
    put:
      summary: Toggles the participation of the given player in this match
      description: Toggles the participation of the given player in this match
      tags:
        - Match
        - Player
      produces:
      - application/json
      parameters:
      - name: match_id
        in: path
        description: Match ID
        required: true
        type: integer
        format: integer
      - name: team_id
        in: path
        description: Team ID
        required: true
        type: integer
        format: integer
      - name: player_data
        in: body
        required: true
        x-is-map: false
        schema:
          $ref: '#/definitions/MatchPlayerTeamRequest'
      responses:
        200:
          description: Correct update of match player list

  /match/{match_id}/team:
    get:
      summary: (???)
      description: (???)
      tags:
        - Match
        - Team
      produces:
      - application/json
      parameters:
      - name: match_id
        in: path
        description: Match ID
        required: true
        type: integer
        format: integer
      responses:
        200:
          description: (???)

  /competition/{competition_id}:
    put:
      description: Competition Update
      produces:
      - application/json
      tags:
        - Competition
      parameters:
      - name: Body
        in: body
        required: true
        x-is-map: false
        schema:
          $ref: '#/definitions/UpdateCompetitionRequest'
      responses:
        200:
          description:
      security: []
  /phase/{phase_id}/group_team:
    get:
      description: returns groups & teams associated to this phase
      tags:
        - Phase
      produces:
      - application/json
      parameters:
        - name: phase_id
          in: path
          required: true
          type: integer
      responses:
        200:
          description:
      security: []
  /season:
    get:
      description: returns all seasons
      tags:
        - Season
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        x-is-map: false
        schema:
          $ref: '#/definitions/FullSeasonListRequest'
      responses:
        200:
          description:
      security: []
  /competition:
    get:
      description: Full List of Competitions
      tags:
        - Competition
      produces:
      - application/json
      parameters:
        - name: token
          in: header
          type: string
          required: true
      responses:
        200:
          description: List of competition managed by token user
      security: []
    post:
      description: Competition Creation
      tags:
        - Competition
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        x-is-map: false
        schema:
          $ref: '#/definitions/CreateCompetitionRequest'
      responses:
        200:
          description:
      security: []
  /phase:
    get:
      description:
      tags:
        - Phase
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description:
      security: []
  /competition/145:
    get:
      description: Full competition Object
      tags:
        - Competition
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description:
      security: []
  /gender:
    get:
      description:
      operationId: Get_Gender List_
      produces:
      - application/json
      tags:
      - Gender
      parameters:
      - name: Body
        in: body
        required: true
        x-is-map: false
        schema:
          $ref: '#/definitions/GenderListRequest'
      responses:
        200:
          description:
      security: []
  /season/{season_id}:
    get:
      description:
      parameters:
        - name: season_id
          in: path
          required: true
          type: integer
      tags:
        - Season
      produces:
      - application/json
      responses:
        200:
          description:
      security: []
    post:
      description: Creates a Season
      tags:
        - Season
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        x-is-map: false
        schema:
          $ref: '#/definitions/SeasonCreationRequest'
      responses:
        200:
          description:
      security: []
    put:
      description:
      operationId: Update_Season Update_
      produces:
      - application/json
      tags:
        - Season
      parameters:
        - name: season_id
          in: path
          required: true
          type: integer
        - name: Body
          in: body
          required: true
          x-is-map: false
          schema:
            $ref: '#/definitions/SeasonUpdateRequest'
      responses:
        200:
          description:
      security: []
  /gender/{gender_id}:
    get:
      description: Return info of a given gender
      operationId: Get_Gender By Gender Id_
      produces:
      - application/json
      parameters:
        - name: gender_id
          in: path
          required: true
          type: integer
      tags:
        - Gender
      responses:
        200:
          description:
      security: []
  /competition/{competition_id}/season/:
    get:
      description: List of seasons for each competition
      tags:
        - Competition
        - Season
      produces:
      - application/json
      parameters:
        - name: competition_id
          in: path
          required: true
          type: integer
      responses:
        200:
          description:
      security: []
  /discipline/{discipline_id}:
    get:
      description: Contains related sub disciplines
      operationId: Get_Discipline By ID_
      produces:
      - application/json
      tags:
        - Discipline
      parameters:
        - name: discipline_id
          in: path
          required: true
          type: integer
      responses:
        200:
          description:
      security: []
  /round:
    get:
      description:
      operationId: get round_
      produces:
      - application/json
      tags:
        - Season
      parameters: []
      responses:
        200:
          description:
      security: []
  /competition/competition_type:
    get:
      description: Full List of Competitions Type's
      operationId: Get_Competition Type_
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description:
      security: []
  /category/{category_id}/team:
    get:
      description:
      tags:
        - Category
      produces:
      - application/json
      parameters:
        - name: category_id
          in: path
          description: Category ID
          required: true
          type: integer
          format: integer
      responses:
        200:
          description:
      security: []
  /discipline/:
    get:
      description:
      operationId: Get All Disciplines_
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        x-is-map: false
        schema:
          $ref: '#/definitions/GetAllDisciplinesRequest'
      responses:
        200:
          description:
      security: []
  /group/:
    get:
      description:
      operationId: get Group_
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description:
      security: []
    post:
      description: Creates a group
      tags:
        - Group
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        x-is-map: false
        schema:
          $ref: '#/definitions/CreateGroupRequest'
      responses:
        200:
          description: list of all matches
  /category/{category_id}/se:
    post:
      summary: Category Create SE
      description: Create all phases groups, rounds and matches for a category for a competition of simple elimination
      tags:
        - Category
      operationId: Create_Category SE_
      produces:
        - application/json
      parameters:
        - name: category_id
          in: path
          description: Category ID
          required: true
          type: integer
          format: integer
        - name: Body
          in: body
          required: true
          x-is-map: false
          schema:
            $ref: '#/definitions/CategorySERequest'
      responses:
        200:
          description:
      security: []
  /competition/rcompetition/{competition_id}:
    get:
      summary: Get Complete Competition
      description: Get All the competition tree
      tags:
        - Competition
      operationId: Get Complete Competition tree
      produces:
      - application/json
      parameters:
        - name: competition_id
          in: path
          description: Competition ID
          required: true
          type: integer
          format: integer
      responses:
        200:
          description:
      security: []

  /category/{category_id}/teams/{team_id}/matches:
    get:
      summary: Returns the matches of a given team, under a category
      tags:
        - Category
        - Team
      produces:
      - application/json
      parameters:
        - name: category_id
          in: path
          required: true
          type: integer
          format: integer
        - name: team_id
          in: path
          required: true
          type: integer
          format: integer
      responses:
        200:
          description: List of matches given a category and a team

  /subdiscipline/{subdiscipline_id}/event:
    get:
      summary: Returns the list of subdiscipline Available Events
      description: Returns the list of subdiscipline Available Events
      tags:
        - Subdiscipline
      parameters:
        - name: subdiscipline_id
          in: path
          required: true
          type: integer
          format: integer
      responses:
        200:
          description: Active subdiscipline Available Events

#######################################################################
#      _       __ _       _ _   _
#     | |     / _(_)     (_) | (_)
#   __| | ___| |_ _ _ __  _| |_ _  ___  _ __  ___
#  / _` |/ _ \  _| | '_ \| | __| |/ _ \| '_ \/ __|
# | (_| |  __/ | | | | | | | |_| | (_) | | | \__ \
#  \__,_|\___|_| |_|_| |_|_|\__|_|\___/|_| |_|___/
#
#######################################################################

definitions:
  UpdateCompetitionRequest:
    title: Update CompetitionRequest
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      discipline_id:
        type: integer
        format: int32
      subdiscipline_id:
        type: integer
        format: int32
      competition_type_id:
        type: integer
        format: int32
    required:
    - name
    - description
    - discipline_id
    - subdiscipline_id
    - competition_type_id
  FullSeasonListRequest:
    title: Full Season ListRequest
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      discipline_id:
        type: integer
        format: int32
      subdiscipline_id:
        type: integer
        format: int32
      competition_type_id:
        type: integer
        format: int32
    required:
    - name
    - description
    - discipline_id
    - subdiscipline_id
    - competition_type_id
  GenderListRequest:
    title: Gender ListRequest
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      discipline_id:
        type: integer
        format: int32
      subdiscipline_id:
        type: integer
        format: int32
      competition_type_id:
        type: integer
        format: int32
    required:
    - name
    - description
    - discipline_id
    - subdiscipline_id
    - competition_type_id
  SeasonbyIdRequest:
    title: Season by IdRequest
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      discipline_id:
        type: integer
        format: int32
      subdiscipline_id:
        type: integer
        format: int32
      competition_type_id:
        type: integer
        format: int32
    required:
    - name
    - description
    - discipline_id
    - subdiscipline_id
    - competition_type_id
  GenderByGenderIdRequest:
    title: Gender By Gender IdRequest
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      discipline_id:
        type: integer
        format: int32
      subdiscipline_id:
        type: integer
        format: int32
      competition_type_id:
        type: integer
        format: int32
    required:
    - name
    - description
    - discipline_id
    - subdiscipline_id
    - competition_type_id
  CreateCompetitionRequest:
    title: Create CompetitionRequest
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      discipline_id:
        type: integer
        format: int32
      subdiscipline_id:
        type: integer
        format: int32
      competition_type_id:
        type: integer
        format: int32
    required:
    - name
    - description
    - discipline_id
    - subdiscipline_id
    - competition_type_id
  SeasonUpdateRequest:
    title: Season UpdateRequest
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      game_title:
        type: string
      active:
        type: boolean
      init_at:
        type: string
      ends_at:
        type: string
    required:
    - name
    - description
    - game_title
    - active
    - init_at
    - ends_at
  SeasonCreationRequest:
    title: Season CreationRequest
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      game_title:
        type: string
      active:
        type: boolean
      init_at:
        type: string
      ends_at:
        type: string
    required:
    - name
    - description
    - game_title
    - active
    - init_at
    - ends_at
  GetAllDisciplinesRequest:
    title: Get All DisciplinesRequest
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      discipline_id:
        type: integer
        format: int32
      subdiscipline_id:
        type: integer
        format: int32
      competition_type_id:
        type: integer
        format: int32
    required:
    - name
    - description
    - discipline_id
    - subdiscipline_id
    - competition_type_id
  CategorySERequest:
    title: Category SERequest
    type: object
    properties:
      team_quantity:
        type: string
    required:
    - team_quantity
  CreateMatchRequest:
    title: Match Creation Request
    type: object
    properties:
      number:
        type: integer
      location:
        type: string
      home_team_id:
        type: integer
      visitor_team_id:
        type: integer
      home_team_score:
        type: integer
      visitor_team_score:
        type: integer
      round_id:
        type: integer
      date:
        type: date
      category_id:
        type: integer
      phase_id:
        type: integer
      group_id:
        type: integer
      referee_id:
        type: integer
    required:
    - home_team_id
    - visitor_team_id
    - date
    - location
    - round_id
  CreateGroupRequest:
    title: Match Creation Request
    type: object
    properties:
      name:
        type: string
      phase_id:
        type: integer
      participant_team:
        type: integer
      classified_team:
        type: integer
    required:
    - name
    - phase_id

  MatchPlayerTeamRequest:
    title: Match Creation Request
    type: object
    properties:
      position:
        type: string
      number:
        type: integer
      player_id:
        type: integer
    required:
    - player_id


  CreateTeamRequest:
    title: Team Creation Request
    type: object
    properties:
      name:
        type: string
      logo_url:
        type: string
      short_name:
        type: string
      description:
        type: string
      category_type_id:
        type: integer
      organization_id:
        type: integer
        description: If not sent, a new 'club' organization will be created under the same name as the team
      category_id:
          type: integer
          description: send if assigned to a category
      phase_id:
          type: integer
          description: send if assigned to a phase
      group_id:
          type: integer
          description: send if assigned to a group
      category_group_phase_team_id:
          type: integer
          description: sent on update only, it's the id of the 'category_group_phase_team' table
    required:
      - name
      - category_type_id

  UserLogin:
    title: User login info
    type: object
    properties:
      username:
        type: string
      password:
        type: string

    #TODO: cargar este ejemplo
    PlayerTeamRequest:
      title: PlayerTeam Request
      type: object
      properties:
        player:
          $ref: '#/definitions/CreateTeamRequest'
        team:
          $ref: '#/definitions/CreateGroupRequest'
